// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2016 08:12:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Nibble
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Nibble_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg CK;
reg [23:0] D;
reg E;
// wires                                               
wire [4:0] ADDR;
wire [2:0] OP;
wire [7:0] X;
wire [7:0] Y;

// assign statements (if any)                          
Nibble i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.C(C),
	.CK(CK),
	.D(D),
	.E(E),
	.OP(OP),
	.X(X),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// C
initial
begin
	C = 1'b1;
end 

// CK
always
begin
	CK = 1'b0;
	CK = #10000 1'b1;
	#10000;
end 
// D[ 23 ]
initial
begin
	D[23] = 1'b0;
	# 60000;
	repeat(5)
	begin
		D[23] = 1'b1;
		D[23] = #80000 1'b0;
		# 80000;
	end
	D[23] = 1'b1;
	D[23] = #80000 1'b0;
end 
// D[ 22 ]
initial
begin
	D[22] = 1'b0;
	# 20000;
	repeat(12)
	begin
		D[22] = 1'b1;
		D[22] = #40000 1'b0;
		# 40000;
	end
	D[22] = 1'b1;
end 
// D[ 21 ]
always
begin
	D[21] = 1'b1;
	D[21] = #20000 1'b0;
	#20000;
end 
// D[ 20 ]
always
begin
	D[20] = 1'b0;
	D[20] = #10000 1'b1;
	#10000;
end 
// D[ 19 ]
initial
begin
	D[19] = 1'b0;
end 
// D[ 18 ]
initial
begin
	D[18] = 1'b0;
end 
// D[ 17 ]
initial
begin
	D[17] = 1'b0;
end 
// D[ 16 ]
initial
begin
	D[16] = 1'b0;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
end 

// E
initial
begin
	E = 1'b1;
end 
endmodule

